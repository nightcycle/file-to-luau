name: Release
on:
  release:
    types: [published]

jobs:
  get_published_release:
    runs-on: ubuntu-latest

    outputs:
      release_id: ${{ steps.release_info.outputs.release_id }}
      upload_url: ${{ steps.release_info.outputs.upload_url }}
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      repo_name: ${{ steps.release_info.outputs.repo_name }}
      repo_owner_name: ${{ steps.release_info.outputs.repo_owner_name }}

    env:
      GITHUB_RBXL_UNPACK_ACCESS_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    steps:
      - name: Set Release Info
        id: release_info
        run: |
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_id=${{ github.event.release.id }}" >> $GITHUB_OUTPUT
          echo "upload_url=${{ github.event.release.upload_url }}" >> $GITHUB_OUTPUT

          repo_owner_name=${{ github.repository_owner }}
          echo "repo_owner_name=$repo_owner_name" >> $GITHUB_OUTPUT

          repo_name=${{ github.repository }}
          forward_repo_pattern="${repo_owner_name}/"
          empty_str=""
          repo_name="${repo_name/${forward_repo_pattern}/${empty_str}}"
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

  release:
    needs: ["get_published_release"]
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-name: file-to-luau-windows-x86_64
            artifact-alias: file-to-luau-win64
            cargo-target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            artifact-name: file-to-luau-linux-x86_64
            artifact-alias: file-to-luau-linux
            cargo-target: x86_64-unknown-linux-gnu

    name: Build (${{ matrix.artifact-name }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.cargo-target }}

      - name: Build Binary
        run: cargo build --release --target ${{ matrix.cargo-target }}
        env:
          CARGO_TARGET_DIR: output

      - name: Debug - List Build Output
        shell: bash
        run: |
          echo "=== Checking build output structure ==="
          find output -type f -name "*file*" || echo "No files with 'file' in name found"
          echo ""
          echo "=== Full output directory structure ==="
          find output -type f || echo "No files found in output directory"
          echo ""
          echo "=== Checking expected path specifically ==="
          ls -la "output/${{ matrix.cargo-target }}/release/" || echo "Release directory doesn't exist"

      - name: Setup Archive + Extension
        shell: bash
        run: |
          mkdir -p staging

          # Set binary name based on OS
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            binary_name="file-to-luau.exe"
          else
            binary_name="file-to-luau"
          fi

          binary_path="output/${{ matrix.cargo-target }}/release/$binary_name"

          echo "Looking for binary at: $binary_path"

          # Check if the binary exists
          if [ ! -f "$binary_path" ]; then
            echo "ERROR: Binary not found at expected path: $binary_path"
            echo "Available files in release directory:"
            ls -la "output/${{ matrix.cargo-target }}/release/" || echo "Release directory doesn't exist"
            exit 1
          fi

          # Copy the binary
          cp "$binary_path" staging/

          # Create archive
          cd staging
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../${{ matrix.artifact-alias }}.zip *
          else
            zip ../${{ matrix.artifact-alias }}.zip *
          fi

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-alias }}.zip

      - name: Upload Binary to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get_published_release.outputs.tag_name }}
          files: ${{ matrix.artifact-alias }}.zip
          make_latest: false
          append_body: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}